{"note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Ananas-build-toolkit","google":"","tagline":"L'Ananas Build Toolkit est un framework de configuration et de déploiement de projet logiciel.","body":"# Ananas Build Toolkit\r\n\r\n## Présentation du projet\r\n\r\nL'Ananas Build Toolkit est un framework de configuration et de déploiement de projet logiciel.\r\n\r\nCes principaux intérêts sont :\r\n\r\n * Installation aisée\r\n * Indifférent au(x) langage(s) de programmation utilisé(s) au sein du projet\r\n * Cycle de travail simple et rapide à prendre en main\r\n * Gestion efficace de profils de configuration multiples\r\n * Modulaire et extensible\r\n * Libre et gratuit\r\n\r\nIl est basé sur [Ant](http://ant.apache.org) et [PHPreprocessor](https://github.com/constructions-incongrues/phpreprocessor).\r\n\r\n## Installation et configuration\r\n\r\nLe toolkit s'installe à l'aide de [Composer](http://getcomposer.org). \r\n\r\nPlacez-vous à la racine du projet et créez un fichier ```composer.json``` avec le contenu suivant :\r\n\r\n```json\r\n{\r\n    \"repositories\": [\r\n        {\r\n            \"type\": \"composer\",\r\n            \"url\": \"http://constructions-incongrues.github.com/packages\"\r\n        }\r\n    ],\r\n    \"require\": {\r\n        \"constructions-incongrues/ananas-build-toolkit\": \"dev-master\"\r\n    }\r\n}\r\n```\r\n\r\nInstallez Composer : \r\n\r\n```bash\r\ncurl -s http://getcomposer.org/installer | php\r\n```\r\n\r\nRécupérez le toolkit : \r\n\r\n```bash\r\nphp composer.phar update\r\n```\r\n\r\nInitialisez le toolkit : \r\n\r\n```bash\r\nant -f vendor/constructions-incongrues/ananas-build-toolkit/modules/toolkit/module.xml toolkit.init -Dbasedir=$PWD\r\n```\r\n\r\n## Utilisation\r\n\r\nLe toolkit expose sept tâches :\r\n\r\n### boostrap\r\n\r\nCette tâche installe les composants nécessaires au bon fonctionnement de chacun des modules du toolkit. Elle doit être exécutée à chaque fois qu'un nouveau module est activé. Elle est appelée automatiquement lors de l'initialisation du projet par la tâche ```init```.\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant bootstrap\r\n```\r\n\r\n### build\r\n\r\nCette tâche génère le code qui doit l'être (classes d'ORM, etc) et effectue les opérations sur le système de fichiers (création de dossiers, liens symboliques, permissions, etc).\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant build\r\n```\r\n\r\n### configure\r\n\r\nCette tâche applique la configuration aux sources du projet. Les directives configurables dans les fichier suffixé par ```-dist``` sont remplacées par les valeurs définies dans le profil de configuration.\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant configure\r\n```\r\n\r\n### migrate\r\n\r\nCette tâche gère les modifications des données du projet et de leurs structures (base de données ou autre).\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant migrate\r\n```\r\n\r\n### review\r\n\r\nCette tâche analyse la qualité du code source avant que les modifications ne soient poussées vers le dépôt.\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant review\r\n```\r\n\r\n### sync \r\n\r\nCette tâche envoie les sources du projet vers le(s) serveur(s) distant(s).\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant sync\r\n```\r\n\r\n### update\r\n\r\nCette tâche met à jour le projet : dépendances git, Composer, etc. Elle recherche aussi les directives configurabless dans les sources et met à jour les profils de configuration.\r\n\r\nPour l'invoquer : \r\n\r\n```bash\r\nant update\r\n```\r\n"}