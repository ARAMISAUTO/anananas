<?xml version="1.0" encoding="UTF-8"?>
<project xmlns:if="ant:if" xmlns:unless="ant:unless" name="configuration" default="help">
	<!-- Stages hooks -->
	<target name="build" />
	<target name="configure" depends="configuration.apply" />
	<target name="deploy" />
	<target name="init" depends="configuration.update" />
	<target name="install" />
	<target name="package" />
	<target name="upload" />

	<!-- This file is used by other modules to communicate with this module -->
	<tempfile property="configuration.buffer.file" prefix="buffer" suffix=".properties" deleteonexit="true" />

	<target name="configuration.apply" description="Applies profile configuration">
		<!-- Make all configuration available -->
		<tempfile property="configuration.loaded" prefix="configuration.loaded." suffix=".properties" deleteonexit="true" />
		<echoproperties destfile="${configuration.loaded}" />

		<!-- Fix echoproperties lame escaping -->
		<replace file="${configuration.loaded}" token="\:" value=":" />
		<replace file="${configuration.loaded}" token="\#" value="#" />
		<replace file="${configuration.loaded}" token="\!" value="!" />
		<replace file="${configuration.loaded}" token="\=" value="=" />

		<!-- Replace tokens with values in dist files and copy them with the right name -->
		<copy todir="${application.dir.base}" overwrite="true" taskname="configuration">
			<fileset dir="${application.dir.base}" includes="${configuration.includes}" excludes="${configuration.excludes}" />
			<mapper type="glob" from="*${configuration.suffix}" to="*" />
			<filterset begintoken="${configuration.token}" endtoken="${configuration.token}" filtersfile="${configuration.loaded}" />
		</copy>
	</target>

	<target name="configuration.update" description="Searches for property tokens in dist files and adds missing configuration to profile">
		<!-- Append new line to profile, just in case -->
		<echo message="${line.separator}" file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" append="true" />
		<tempfile property="configuration.found.file" prefix="found" deleteonexit="true" />
		<for param="file">
			<path>
				<fileset dir="${application.dir.base}" includes="${configuration.includes}" excludes="${configuration.excludes}" />
			</path>
			<sequential>
				<var name="configuration.found" unset="true" />
				<loadfile srcFile="@{file}" property="configuration.found">
					<filterchain>
						<!-- Put tokens on single lines -->
						<tokenfilter>
							<replaceregex pattern="(${configuration.token}[^${configuration.token}]+${configuration.token})" replace="${line.separator}\1${line.separator}" flags="g" />
						</tokenfilter>
						<!-- Remove lines not containing tokens-->
						<linecontainsregexp>
							<regexp pattern="^${configuration.token}.+${configuration.token}$" />
						</linecontainsregexp>
						<!-- Transform tokens into configuration declarations -->
						<tokenfilter>
							<replaceregex pattern="^${configuration.token}(.+)${configuration.token}$" replace="\1=" />
						</tokenfilter>
					</filterchain>
				</loadfile>
				<property unless:set="configuration.found" name="configuration.found" value="" />
				<echo message="${configuration.found}" file="${configuration.found.file}" append="true" />
			</sequential>
		</for>

		<!-- Merge buffer and found files -->
		<concat destfile="${configuration.found.file}" overwrite="true">
			<fileset file="${configuration.buffer.file}" />
		</concat>

		<!-- Reload selected configuration profile properties with a unique suffix so that we can easily compare them with the fousnd ones -->
		<property name="configuration.merge.prefix" value="${toolkit.timestamp}" />
		<property file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" prefix="${configuration.merge.prefix}" />
		<concat destfile="${configuration.dir.profiles}/${configuration.profile}/profile.properties" append="true" fixlastline="true">
			<filelist dir="${application.dir.base}" files="${configuration.found.file}" />
			<!-- Add missing properties to configuration profile -->
			<filterchain>
				<scriptfilter language="javascript">
					<![CDATA[
					var line = self.getToken();
					var prefix = project.getProperty('configuration.merge.prefix');

					// Only handle lines with a property declaration
					if (line.indexOf("=") != -1) {
						var property = line.substr(0, line.indexOf('='));
						if (project.getProperty(prefix + '.' + property) !== null) {
							// Skip duplicates
							self.setToken(null);
						} else {
							// Add missing properties
							self.setToken(line);
						}
					}
					]]>
				</scriptfilter>

				<!-- Sort properties alphabeticaly -->
				<sortfilter />

				<tokenfilter>
					<!-- Remove duplicates -->
					<uniqfilter />

					<!-- Remove surrounding spaces -->
    				<trim />

					<!-- Remove empty lines -->
					<ignoreblank />
				</tokenfilter>
			</filterchain>
		</concat>

		<!-- Remove remaining blank lines -->
		<replaceregexp file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" match="(\r?\n)\s*\r?\n" flags="g" replace="\1" />

		<!-- Fix echoproperties lame escaping -->
		<replace file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" token="\:" value=":" />
		<replace file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" token="\#" value="#" />
		<replace file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" token="\!" value="!" />
		<replace file="${configuration.dir.profiles}/${configuration.profile}/profile.properties" token="\=" value="=" />

		<!-- Log message -->
		<echo message="Updated configuration profile in ${configuration.dir.profiles}/${configuration.profile}/profile.properties" taskname="configuration" />
	</target>

	<target name="configuration.dotenv" description="Exports profile configuration to environment variables declarations in a file" depends="configuration.update">
		<!-- Dump all properties in a temporary file -->
		<tempfile property="all.properties" prefix="all." suffix=".properties" deleteonexit="true" />
		<echoproperties destfile="${all.properties}" />
		<!-- Fix echoproperties lame escaping -->
		<replace file="${all.properties}" token="\:" value=":" />
		<replace file="${all.properties}" token="\#" value="#" />
		<replace file="${all.properties}" token="\!" value="!" />
		<replace file="${all.properties}" token="\=" value="=" />

		<copy
			file="${all.properties}"
			tofile="${configuration.dotenv.outputfile}"
			overwrite="true"
			taskname="configuration">
			<filterchain>
				<!-- Remove comments generated by echoproperties -->
				<striplinecomments>
					<comment value="#"/>
				</striplinecomments>

				<!-- Make property names shell compatible (capitalize, replace dots by underscores, quote values) -->
				<tokenfilter>
					<scriptfilter language="javascript">
						var parts = self.getToken().split('=');
						self.setToken(parts[0].replace(/\./g, '_').toUpperCase() + '="' + parts[1].replace(/"/g, '') + '"');
					</scriptfilter>
				</tokenfilter>
			</filterchain>
		</copy>

		<!-- Log message -->
		<echo message="Exported '${configuration.profile}' configuration profile to ${configuration.dotenv.outputfile}" taskname="configuration" />
	</target>
</project>
