<?xml version="1.0" encoding="UTF-8"?>
<project name="rsync2">
	<!-- Mandatory targets -->
	<target name="bootstrap">
        <dirname file="${ant.file.rsync2}" property="toolkit.module.basedir" />
        <initConfiguration
            projectDir="${project.dirs.base}"
            configurationDir="${abt.dir.configuration}"
            moduleDir="${toolkit.module.basedir}"
            moduleName="rsync2" />
    </target>
	<target name="update" />
	<target name="configure" />
	<target name="build" />
	<target name="review" />
	<target name="migrate" />
	<target name="sync" depends="rsync" />

	<!-- Syncs your project files to a remote destination -->
	<!-- TODO : only use one rsync exec for all remotes -->
	<target name="rsync">
		<!-- Sanity checks -->
		<fail unless="remote.username" />
		<fail unless="remote.host" />
		<fail unless="remote.path.root" />

		<!-- Primary rsync destination -->
		<echo>Rsyncing to primary destination ${remote.username}@${remote.host}:${remote.path.root}</echo>
		<echo>rsync additional options : ${rsync.options}</echo>
        <antcall target="rsync.remote">
            <param name="remote" value="${remote.username}@${remote.host}:${remote.path.root}" />
        </antcall>

		<!-- Secondary rsync destinations -->
		<!-- TODO : fallback on primary parameters -->
		<propertyselector property="remotes" delimiter="," match="^remote.(.+).(host)" select="\1" />
        <script language="javascript">
            <![CDATA[
                var ids = project.getProperty('remotes');
                if (ids != undefined) {
                    ids = ids.split(',');
                    for (var i = 0; i < ids.length; i++) {
                    	var remoteHost = project.getProperty('remote.' + ids[i] + '.host');
                    	var remoteUsername = project.getProperty('remote.' + ids[i] + '.username');
                    	var remotePathRoot = project.getProperty('remote.' + ids[i] + '.path.root');
                    	project.setProperty('remote.current.host', remoteHost);
                    	project.setProperty('remote.current.username', remoteUsername);
                    	project.setProperty('remote.current.path.root', remotePathRoot);
                        taskAntCall = project.createTask('antcall');
                        taskAntCall.setTarget('rsync.do');
                        taskAntCall.perform();
                    }
                }
            ]]>
        </script>
	</target>

	<target name="rsync.do">
		<echo>Rsyncing to secondary destination ${remote.current.username}@${remote.current.host}:${remote.current.path.root}</echo>
        <echo>rsync additional options : ${rsync.options}</echo>
        <antcall target="rsync.remote">
            <param name="remote" value="${remote.current.username}@${remote.current.host}:${remote.current.path.root}" />
        </antcall>
    </target>

    <target name="rsync.remote">
        <if>
            <available file="${project.dirs.base}/${abt.dir.configuration}/modules/rsync2/exclude"/>
            <then>
                <property name="rsync.exclude" value="--exclude-from=${project.dirs.base}/${abt.dir.configuration}/modules/rsync2/exclude"/>
            </then>
            <else>
                <property name="rsync.exclude" value=""/>
            </else>
        </if>

        <if>
            <available file="${project.dirs.base}/${abt.dir.configuration}/modules/rsync2/include"/>
            <then>
                <property name="rsync.include" value="--include-from=${project.dirs.base}/${abt.dir.configuration}/modules/rsync2/include"/>
            </then>
            <else>
                <property name="rsync.include" value=""/>
            </else>
        </if>

        <exec executable="rsync" failonerror="true">
			<arg line="
              ${rsync.exclude}
              ${rsync.include}
              --force
              --links
              ${rsync.options}
              -agpvzc ${project.dirs.base}/ -e ssh ${remote}" />
		</exec>
    </target>
</project>
